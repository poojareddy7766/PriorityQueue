1. Before introducing a Heap, let's first talk about a Priority Queue.
2. A priority queue is an abstract data type similar to a regular queue or stack data structure in which each element additionally has a "priority" associated with it.
   In a priority queue, an element with high priority is served before an element with low priority.
3. A common misconception is that a Heap is the same as a Priority Queue, which is not true. A priority queue is an abstract data type, while a Heap is a data structure.
   Therefore, a Heap is not a Priority Queue, but a way to implement a Priority Queue.
4. There are multiple ways to implement a Priority Queue, such as array and linked list. However, these implementations only guarantee O(1) time complexity for either
    insertion or deletion, while the other operation will have a time complexity of O(N). On the other hand, implementing the priority queue with Heap will allow both
    insertion and deletion to have a time complexity of O(logN).
    
    Lets Learn.....................
    1. Understand the Heap data structure.
    2. Understand Max Heap and Min Heap.
    3. Understand the insertion and deletion of a Heap.
    4. Implement a Heap.
    
 Definition of Heap:
 a Heap is a special type of binary tree. A heap is a binary tree that meets the following criteria:

 1. Is a complete binary tree;
 2. The value of each node must be no greater than (or no less than) the value of its child nodes.
 
 A Heap has the following properties:

 1. Insertion of an element into the Heap has a time complexity of O(logN);
 2. Deletion of an element from the Heap has a time complexity of O(logN);
 3. The maximum/minimum value in the Heap can be obtained with O(1) time complexity.
 
 Classification Of Heap:
 There are two kinds of heaps: Max Heap and Min Heap.

 Max Heap: Each node in the Heap has a value no less than its child nodes. Therefore, the top element (root node) has the largest value in the Heap.

 Min Heap: Each node in the Heap has a value no larger than its child nodes. Therefore, the top element (root node) has the smallest value in the Heap.
 

